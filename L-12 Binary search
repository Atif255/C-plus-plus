#include <iostream>
using namespace std;

int binarysearch(int arr[], int size, int key) {
  int start = 0;
  int end = size-1;
  int mid = start + (end-start)/2;

  while(start<=end) {
    if (arr[mid] == key ) {
      return mid;
    }
    if (arr[mid]>key) {
      start =mid+1;
    }
    else {
      end = mid-1;
    }
    mid = start + (end-start)/2;
  }
  return -1;
}

int main() {
  int even[6] = {9,8,6,5,2,0};
  int odd[5] = {6,5,1,3,0};

  int evenindex = binarysearch(even,6,0);
  cout << evenindex << endl;

  int oddindex = binarysearch(odd,6,55);
  cout << oddindex << endl;
  
}

**************************************************************************

#include<vector>
using namespace std;
int firstOcc(vector<int>& arr, int n, int key) {

    int s = 0, e = n-1;
    int mid = s + (e-s)/2;
    int ans = -1;
    while(s<=e) {

        if(arr[mid] == key){
            ans = mid;
            e = mid - 1;
        }
        else if(key > arr[mid]) {//Right me jao
            s = mid + 1;
        }
        else if(key < arr[mid]) {//left me jao
            e = mid - 1;
        }

        mid = s + (e-s)/2;
    }
    return ans;
}

int lastOcc(vector<int>& arr, int n, int key) {

    int s = 0, e = n-1;
    int mid = s + (e-s)/2;
    int ans = -1;
    while(s<=e) {

        if(arr[mid] == key){
            ans = mid;
            s = mid + 1;
        }
        else if(key > arr[mid]) {//Right me jao
            s = mid + 1;
        }
        else if(key < arr[mid]) {//left me jao
            e = mid - 1;
        }

        mid = s + (e-s)/2;
    }
    return ans;
}

pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k)
{
    pair<int,int> p;
    p.first = firstOcc(arr, n, k);
    p.second = lastOcc(arr, n, k);
    
    return p;
}

*******************************************************
